const methods = {
  array: {
    concat: "Array.prototype.concat",
    constructor: "Array.prototype.constructor",
    copyWithin: "Array.prototype.copyWithin",
    entries: "Array.prototype.entries",
    every: "Array.prototype.every",
    fill: "Array.prototype.fill",
    filter: "Array.prototype.filter",
    find: "Array.prototype.find",
    findIndex: "Array.prototype.findIndex",
    forEach: "Array.prototype.forEach",
    includes: "Array.prototype.includes",
    indexOf: "Array.prototype.indexOf",
    join: "Array.prototype.join",
    keys: "Array.prototype.keys",
    lastIndexOf: "Array.prototype.lastIndexOf",
    map: "Array.prototype.map",
    pop: "Array.prototype.pop",
    push: "Array.prototype.push",
    reduce: "Array.prototype.reduce",
    reduceRight: "Array.prototype.reduceRight",
    reverse: "Array.prototype.reverse",
    shift: "Array.prototype.shift",
    slice: "Array.prototype.slice",
    some: "Array.prototype.some",
    sort: "Array.prototype.sort",
    splice: "Array.prototype.splice",
    toLocaleString: "Array.prototype.toLocaleString",
    toString: "Array.prototype.toString",
    unshift: "Array.prototype.unshift",
    values: "Array.prototype.values",
    "@@iterator": "Array.prototype[@@iterator]",
    "@@unscopables": "Array.prototype[@@unscopables]",
  },
  boolean: {
    constructor: "Boolean.prototype.constructor",
    toString: "Boolean.prototype.toString",
    valueOf: "Boolean.prototype.valueOf",
  },
  object: {
    constructor: "Object.prototype.constructor",
    hasOwnProperty: "Object.prototype.hasOwnProperty",
    isPrototypeOf: "Object.prototype.isPrototypeOf",
    propertyIsEnumerable: "Object.prototype.propertyIsEnumerable",
    toLocaleString: "Object.prototype.toLocaleString",
    toString: "Object.prototype.toString",
    valueOf: "Object.prototype.valueOf",
  },
  error: {
    constructor: "Error.prototype.constructor",
    message: "Error.prototype.message",
    name: "Error.prototype.name",
    toString: "Error.prototype.toString",
  },
  number: {
    constructor: "Number.prototype.constructor",
    toExponential: "Number.prototype.toExponential",
    toFixed: "Number.prototype.toFixed",
    toLocaleString: "Number.prototype.toLocaleString",
    toPrecision: "Number.prototype.toPrecision",
    toString: "Number.prototype.toString",
    valueOf: "Number.prototype.valueOf",
  },
  date: {
    constructor: "Date.prototype.constructor",
    getDate: "Date.prototype.getDate",
    getDay: "Date.prototype.getDay",
    getFullYear: "Date.prototype.getFullYear",
    getHours: "Date.prototype.getHours",
    getMilliseconds: "Date.prototype.getMilliseconds",
    getMinutes: "Date.prototype.getMinutes",
    getMonth: "Date.prototype.getMonth",
    getSeconds: "Date.prototype.getSeconds",
    getTime: "Date.prototype.getTime",
    getTimezoneOffset: "Date.prototype.getTimezoneOffset",
    getUTCDate: "Date.prototype.getUTCDate",
    getUTCDay: "Date.prototype.getUTCDay",
    getUTCFullYear: "Date.prototype.getUTCFullYear",
    getUTCHours: "Date.prototype.getUTCHours",
    getUTCMilliseconds: "Date.prototype.getUTCMilliseconds",
    getUTCMinutes: "Date.prototype.getUTCMinutes",
    getUTCMonth: "Date.prototype.getUTCMonth",
    getUTCSeconds: "Date.prototype.getUTCSeconds",
    setDate: "Date.prototype.setDate",
    setFullYear: "Date.prototype.setFullYear",
    setHours: "Date.prototype.setHours",
    setMilliseconds: "Date.prototype.setMilliseconds",
    setMinutes: "Date.prototype.setMinutes",
    setMonth: "Date.prototype.setMonth",
    setSeconds: "Date.prototype.setSeconds",
    setTime: "Date.prototype.setTime",
    setUTCDate: "Date.prototype.setUTCDate",
    setUTCFullYear: "Date.prototype.setUTCFullYear",
    setUTCHours: "Date.prototype.setUTCHours",
    setUTCMilliseconds: "Date.prototype.setUTCMilliseconds",
    setUTCMinutes: "Date.prototype.setUTCMinutes",
    setUTCMonth: "Date.prototype.setUTCMonth",
    setUTCSeconds: "Date.prototype.setUTCSeconds",
    toDateString: "Date.prototype.toDateString",
    toISOString: "Date.prototype.toISOString",
    toJSON: "Date.prototype.toJSON",
    toLocaleDateString: "Date.prototype.toLocaleDateString",
    toLocaleString: "Date.prototype.toLocaleString",
    toLocaleTimeString: "Date.prototype.toLocaleTimeString",
    toString: "Date.prototype.toString",
    toTimeString: "Date.prototype.toTimeString",
    toUTCString: "Date.prototype.toUTCString",
    valueOf: "Date.prototype.valueOf",
    "@@toPrimitive": "Date.prototype[@@toPrimitive]",
  },
  string: {
    charAt: "String.prototype.charAt",
    charCodeAt: "String.prototype.charCodeAt",
    codePointAt: "String.prototype.codePointAt",
    concat: "String.prototype.concat",
    constructor: "String.prototype.constructor",
    endsWith: "String.prototype.endsWith",
    includes: "String.prototype.includes",
    indexOf: "String.prototype.indexOf",
    lastIndexOf: "String.prototype.lastIndexOf",
    localeCompare: "String.prototype.localeCompare",
    match: "String.prototype.match",
    normalize: "String.prototype.normalize",
    padEnd: "String.prototype.padEnd",
    padStart: "String.prototype.padStart",
    repeat: "String.prototype.repeat",
    replace: "String.prototype.replace",
    search: "String.prototype.search",
    slice: "String.prototype.slice",
    split: "String.prototype.split",
    startsWith: "String.prototype.startsWith",
    substring: "String.prototype.substring",
    toLocaleLowerCase: "String.prototype.toLocaleLowerCase",
    toLocaleUpperCase: "String.prototype.toLocaleUpperCase",
    toLowerCase: "String.prototype.toLowerCase",
    toString: "String.prototype.toString",
    toUpperCase: "String.prototype.toUpperCase",
    trim: "String.prototype.trim",
    valueOf: "String.prototype.valueOf",
    "@@iterator": "String.prototype[@@iterator]",
  },
  map: {
    clear: "Map.prototype.clear",
    constructor: "Map.prototype.constructor",
    delete: "Map.prototype.delete",
    entries: "Map.prototype.entries",
    forEach: "Map.prototype.forEach",
    get: "Map.prototype.get",
    has: "Map.prototype.has",
    keys: "Map.prototype.keys",
    set: "Map.prototype.set",
    size: "Map.prototype.size",
    values: "Map.prototype.values",
    "@@iterator": "Map.prototype[@@iterator]",
    "@@toStringTag": "Map.prototype[@@toStringTag]",
  },
  weakMap: {
    constructor: "WeakMap.prototype.constructor",
    delete: "WeakMap.prototype.delete",
    get: "WeakMap.prototype.get",
    has: "WeakMap.prototype.has",
    set: "WeakMap.prototype.set",
    "@@toStringTag": "WeakMap.prototype[@@toStringTag]",
  },
  weakSet: {
    add: "WeakSet.prototype.add",
    constructor: "WeakSet.prototype.constructor",
    delete: "WeakSet.prototype.delete",
    has: "WeakSet.prototype.has",
    "@@toStringTag": "WeakSet.prototype[@@toStringTag]",
  },
  arrayBuffer: {
    byteLength: "ArrayBuffer.prototype.byteLength",
    constructor: "ArrayBuffer.prototype.constructor",
    slice: "ArrayBuffer.prototype.slice",
    "@@toStringTag": "ArrayBuffer.prototype[@@toStringTag]",
  },
  dataView: {
    buffer: "DataView.prototype.buffer",
    byteLength: "DataView.prototype.byteLength",
    byteOffset: "DataView.prototype.byteOffset",
    constructor: "DataView.prototype.constructor",
    getFloat32: "DataView.prototype.getFloat32",
    getFloat64: "DataView.prototype.getFloat64",
    getInt8: "DataView.prototype.getInt8",
    getInt16: "DataView.prototype.getInt16",
    getInt32: "DataView.prototype.getInt32",
    getUint8: "DataView.prototype.getUint8",
    getUint16: "DataView.prototype.getUint16",
    getUint32: "DataView.prototype.getUint32",
    setFloat32: "DataView.prototype.setFloat32",
    setFloat64: "DataView.prototype.setFloat64",
    setInt8: "DataView.prototype.setInt8",
    setInt16: "DataView.prototype.setInt16",
    setInt32: "DataView.prototype.setInt32",
    setUint8: "DataView.prototype.setUint8",
    setUint16: "DataView.prototype.setUint16",
    setUint32: "DataView.prototype.setUint32",
    "@@toStringTag": "DataView.prototype[@@toStringTag]",
  },
  promise: {
    catch: "Promise.prototype.catch",
    constructor: "Promise.prototype.constructor",
    then: "Promise.prototype.then",
    "@@toStringTag": "Promise.prototype[@@toStringTag]",
  },
  set: {
    add: "Set.prototype.add",
    clear: "Set.prototype.clear",
    constructor: "Set.prototype.constructor",
    delete: "Set.prototype.delete",
    entries: "Set.prototype.entries",
    forEach: "Set.prototype.forEach",
    has: "Set.prototype.has",
    keys: "Set.prototype.keys",
    size: "Set.prototype.size",
    values: "Set.prototype.values",
    "@@iterator": "Set.prototype[@@iterator]",
    "@@toStringTag": "Set.prototype[@@toStringTag]",
  },
  symbol: {
    constructor: "Symbol.prototype.constructor",
    toString: "Symbol.prototype.toString",
    valueOf: "Symbol.prototype.valueOf",
    "@@toPrimitive": "Symbol.prototype[@@toPrimitive]",
    "@@toStringTag": "Symbol.prototype[@@toStringTag]",
  },
  function: {
    apply: "Function.prototype.apply",
    bind: "Function.prototype.bind",
    call: "Function.prototype.call",
    constructor: "Function.prototype.constructor",
    toString: "Function.prototype.toString",
    "@@hasInstance": "Function.prototype[@@hasInstance]",
  },
};

function has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

const instanceMethods = Object.values(methods).reduce(
  function(previous, current) {
    for (const [key, value] of Object.entries(current)) {
      if (has(previous, key)) {
        if (Array.isArray(previous[key])) {
          previous[key].push(value);
        } else {
          previous[key] = [previous[key], value];
        }
      } else {
        previous[key] = value;
      }
    }
    return previous;
  },
  {}
);

module.exports = instanceMethods;
